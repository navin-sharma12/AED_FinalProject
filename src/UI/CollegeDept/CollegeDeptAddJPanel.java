/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.CollegeDept;

import Schooling.Model.Courses;
import Schooling.Model.FieldOfInterest;
import Schooling.Model.PersonalOrganization;
import Schooling.Model.University;
import Student.Student;
import com.sun.mail.handlers.text_plain;
import java.util.List;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Properties;
import java.util.Random;
import java.util.Set;
import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.Message.RecipientType;
import javax.mail.PasswordAuthentication;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

/**
 *
 * @author pikku
 */
public class CollegeDeptAddJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CollegeDeptAddJPanel
     */
    ResultSet rs_course, rs_university, rs_foiId, rs_foi, rs_all_university, rs_all_student, rs_course_id, rs_university_id, rs_seats, rs_freelancer,rs_all_freelancer, rs_freelancer_id;
    int student_id;
    String student_email;
    String password;

    public CollegeDeptAddJPanel(JPanel controlArea, JPanel workArea) {
        initComponents();
        showTable();
        showUniversityTable();
        showFreeLancer();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStudent = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblUniversity = new javax.swing.JTable();
        btnAssign = new java.awt.Button();
        lblCourse = new java.awt.Label();
        ComboBoxFOI = new javax.swing.JComboBox<>();
        lblFOI1 = new java.awt.Label();
        ComboBoxCourse = new javax.swing.JComboBox<>();
        ComboBoxUniversity = new javax.swing.JComboBox<>();
        btnSave = new java.awt.Button();
        btnFetchCourse1 = new java.awt.Button();
        jRadioButtonUniversity = new javax.swing.JRadioButton();
        RadioButtonFree = new javax.swing.JRadioButton();
        btnFetchUniversity1 = new java.awt.Button();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblFreeLancer = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 204, 255));

        tblStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "Firstname", "Lastname", "Gender", "Status"
            }
        ));
        jScrollPane1.setViewportView(tblStudent);

        tblUniversity.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "University", "Course", "Seats"
            }
        ));
        jScrollPane2.setViewportView(tblUniversity);

        btnAssign.setLabel("Assign");
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });

        lblCourse.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 12)); // NOI18N
        lblCourse.setText("Course");

        ComboBoxFOI.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ComboBoxFOI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxFOIActionPerformed(evt);
            }
        });

        lblFOI1.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 12)); // NOI18N
        lblFOI1.setText("Field");

        ComboBoxCourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ComboBoxCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxCourseActionPerformed(evt);
            }
        });

        ComboBoxUniversity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ComboBoxUniversity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxUniversityActionPerformed(evt);
            }
        });

        btnSave.setLabel("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnFetchCourse1.setLabel("Fetch");
        btnFetchCourse1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFetchCourse1ActionPerformed(evt);
            }
        });

        buttonGroup.add(jRadioButtonUniversity);
        jRadioButtonUniversity.setText("Univerity");

        buttonGroup.add(RadioButtonFree);
        RadioButtonFree.setText("Freelancer");
        RadioButtonFree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButtonFreeActionPerformed(evt);
            }
        });

        btnFetchUniversity1.setLabel("Fetch");
        btnFetchUniversity1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFetchUniversity1ActionPerformed(evt);
            }
        });

        tblFreeLancer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Firstname", "Lastname", "Course", "Seats"
            }
        ));
        jScrollPane3.setViewportView(tblFreeLancer);

        jLabel1.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 18)); // NOI18N
        jLabel1.setText("                                        College Department : Add");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/college.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnAssign, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(84, 84, 84)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioButtonUniversity)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(RadioButtonFree)
                                        .addGap(109, 109, 109)
                                        .addComponent(btnFetchUniversity1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(lblFOI1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(37, 37, 37))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(lblCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(53, 53, 53)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnFetchCourse1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ComboBoxCourse, 0, 149, Short.MAX_VALUE)
                                    .addComponent(ComboBoxFOI, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ComboBoxUniversity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnSave, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 659, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(270, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblFOI1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(75, 75, 75)
                                        .addComponent(lblCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(ComboBoxFOI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnFetchCourse1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(20, 20, 20)
                                        .addComponent(ComboBoxCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(34, 34, 34))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)))
                        .addComponent(jRadioButtonUniversity))
                    .addComponent(btnAssign, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnFetchUniversity1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RadioButtonFree))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(ComboBoxUniversity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(754, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed
        // TODO add your handling code here:

        int selectedRowIndex = tblStudent.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblStudent.getModel();
        populateFieldOfInterest();


    }//GEN-LAST:event_btnAssignActionPerformed

    private void ComboBoxFOIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxFOIActionPerformed
        // TODO add your handling code here:

    }

    private void showCourses(int id) {


    }//GEN-LAST:event_ComboBoxFOIActionPerformed

    private void ComboBoxCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxCourseActionPerformed
        // TODO add your handling code here:


    }//GEN-LAST:event_ComboBoxCourseActionPerformed

    private void btnFetchCourse1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFetchCourse1ActionPerformed
        // TODO add your handling code here:
        try {
            FieldOfInterest foi_new = new FieldOfInterest();
            if (ComboBoxFOI.getSelectedItem() != null) {
                rs_foiId = foi_new.getIdByName(ComboBoxFOI.getSelectedItem().toString());
                while (rs_foiId.next()) {
                    Courses cs = new Courses();
                    rs_course = cs.getCourseByCategory(rs_foiId.getInt(1));
                    ComboBoxCourse.removeAllItems();
                    while (rs_course.next()) {
                        ComboBoxCourse.addItem(rs_course.getString(3));
                    }

                }

            }
        } catch (SQLException ex) {
            ex.getMessage();
        }

    }//GEN-LAST:event_btnFetchCourse1ActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if (jRadioButtonUniversity.isSelected()) {
            assignUniversity();
        } else if (RadioButtonFree.isSelected()) {
            assignFreeLancer();
        }

    }//GEN-LAST:event_btnSaveActionPerformed

    private void RadioButtonFreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButtonFreeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RadioButtonFreeActionPerformed

    private void btnFetchUniversity1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFetchUniversity1ActionPerformed
        // TODO add your handling code here:
        if (jRadioButtonUniversity.isSelected()) {
            fetchUniversity();
        } else if (RadioButtonFree.isSelected()) {
            fetchFreeLancer();
        } else {
            JOptionPane.showMessageDialog(this, "Please select radio button");
        }


    }//GEN-LAST:event_btnFetchUniversity1ActionPerformed

    private void ComboBoxUniversityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxUniversityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboBoxUniversityActionPerformed

    private void showTable() {
        try {
            DefaultTableModel model = (DefaultTableModel) tblStudent.getModel();
            model.setRowCount(0);
            Student student = new Student();
            rs_all_student = student.getNotAdmittedStudent();

            while (rs_all_student.next()) {
                Object[] row = new Object[5];

                row[0] = rs_all_student.getInt(1);
                row[1] = rs_all_student.getString(2);
                row[2] = rs_all_student.getString(3);
                row[3] = rs_all_student.getString(6);
                row[4] = rs_all_student.getString(11);

                model.addRow(row);
            }
//            empty all dropdown
            ComboBoxFOI.removeAllItems();
            ComboBoxCourse.removeAllItems();
            ComboBoxUniversity.removeAllItems();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    public String getRandomNumber() {
        List<Integer> numbers;
        numbers = new ArrayList<Integer>();
        for (int i = 0; i < 10; i++) {
            numbers.add(i);
        }

        Collections.shuffle(numbers);

        String result = "";
        for (int i = 0; i < 4; i++) {
            result += numbers.get(i).toString();
        }
        return result;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBoxCourse;
    private javax.swing.JComboBox<String> ComboBoxFOI;
    private javax.swing.JComboBox<String> ComboBoxUniversity;
    private javax.swing.JRadioButton RadioButtonFree;
    private java.awt.Button btnAssign;
    private java.awt.Button btnFetchCourse1;
    private java.awt.Button btnFetchUniversity1;
    private java.awt.Button btnSave;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButton jRadioButtonUniversity;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private java.awt.Label lblCourse;
    private java.awt.Label lblFOI1;
    private javax.swing.JTable tblFreeLancer;
    private javax.swing.JTable tblStudent;
    private javax.swing.JTable tblUniversity;
    // End of variables declaration//GEN-END:variables

    private void showUniversityTable() {
        try {
            DefaultTableModel model = (DefaultTableModel) tblUniversity.getModel();
            model.setRowCount(0);
            University un = new University();
            rs_all_university = un.getAllUniversityStudent();
            while (rs_all_university.next()) {
                Object[] row = new Object[3];

                row[0] = rs_all_university.getString(4);
                row[1] = rs_all_university.getString(2);
                row[2] = rs_all_university.getInt(5);

                model.addRow(row);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

    }

    private void sentEmail(String email, String university, String password) {
        try {
            Properties properties = new Properties();
            properties.put("mail.smtp.auth", "true");
            properties.put("mail.smtp.starttls.enable", "true");
            properties.put("mail.smtp.ssl.host", "smtp.gmail.com");
            properties.put("mail.smtp.host", "smtp.gmail.com");
            properties.put("mail.smtp.port", 587);
            Session session = Session.getDefaultInstance(properties,
                    new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication("helpinghomeless.aed@gmail.com", "gygsgpsczxfzjvjj");

                }
            });
            String content = "Welcome to" + university + ".\r\n Your email: " + email + "\r\n password: " + password + "\r\n for the portal.";
            System.out.println(session);
            Message message = new MimeMessage(session);
            message.setSubject("Welcome to" + university + "");
            message.setContent(content, "text/plain");
            message.setFrom(new InternetAddress("helpinghomeless.aed@gmail.com"));
            message.setRecipient(RecipientType.TO, new InternetAddress(email));
            message.setSentDate(new Date());

            Transport.send(message);
            JOptionPane.showMessageDialog(this, "Email Sent");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

    }

    private void populateFieldOfInterest() {
        try {
            FieldOfInterest foi = new FieldOfInterest();
            rs_foi = foi.getallFieldOfInterest();
            ComboBoxFOI.removeAllItems();
            ComboBoxCourse.removeAllItems();
            ComboBoxUniversity.removeAllItems();
            while (rs_foi.next()) {
                ComboBoxFOI.addItem(rs_foi.getString(2));

            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

    }

    private void fetchUniversity() {
        try {
            Courses cs = new Courses();
            if (ComboBoxCourse.getSelectedItem() != null) {
                rs_course = cs.getCourseIdByName(ComboBoxCourse.getSelectedItem().toString());

                while (rs_course.next()) {
                    System.out.println(rs_course.getInt(1));
                    University un = new University();
                    rs_university = un.getUniversityByCourseId(rs_course.getInt(1));
                    ComboBoxUniversity.removeAllItems();
                    while (rs_university.next()) {
                        System.out.println(rs_university.getString(3));
                        ComboBoxUniversity.addItem(rs_university.getString(3));
                    }

                }

            }
        } catch (SQLException ex) {
            ex.getMessage();
        }

    }

    private void fetchFreeLancer() {
        try {
            Courses cs = new Courses();
            if (ComboBoxCourse.getSelectedItem() != null) {
                rs_course = cs.getCourseIdByName(ComboBoxCourse.getSelectedItem().toString());

                while (rs_course.next()) {
                    System.out.println(rs_course.getInt(1));
                    PersonalOrganization ps = new PersonalOrganization();
                    rs_freelancer = ps.getFreelancerByCourseId(rs_course.getInt(1));
                    ComboBoxUniversity.removeAllItems();
                    while (rs_freelancer.next()) {
                        ComboBoxUniversity.addItem(rs_freelancer.getString(2) + " " + rs_freelancer.getString(3));
                    }

                }

            }
        } catch (SQLException ex) {
            ex.getMessage();
        }
    }

    private void assignUniversity() {
        int selectedRowIndex = tblStudent.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblStudent.getModel();
        student_id = Integer.parseInt(model.getValueAt(selectedRowIndex, 0).toString());
        if (!(ComboBoxCourse.getSelectedItem() != null || ComboBoxUniversity.getSelectedItem() != null)) {
            JOptionPane.showMessageDialog(this, "Please select from dropdown");
        } else {
            String course_name = ComboBoxCourse.getSelectedItem().toString();
            String university_name = ComboBoxUniversity.getSelectedItem().toString();
            try {
                Courses cs = new Courses();
                rs_course_id = cs.getCourseIdByName(course_name);

                while (rs_course_id.next()) {
                    int course_id, university_id;
                    course_id = rs_course_id.getInt(1);
                    University uni = new University();
                    rs_university_id = uni.getUniversityIdByName(university_name);
                    student_email = model.getValueAt(selectedRowIndex, 2).toString().toLowerCase() + "." + model.getValueAt(selectedRowIndex, 1).toString().toLowerCase() + "@" + university_name.toLowerCase().split(" ")[0] + ".edu";
                    password = model.getValueAt(selectedRowIndex, 1).toString().toLowerCase() + "." + model.getValueAt(selectedRowIndex, 2).toString().toLowerCase();
                    while (rs_university_id.next()) {
                        university_id = rs_university_id.getInt(1);

                        rs_seats = cs.findSeats(course_id, university_id);
                        while (rs_seats.next()) {
                            if (rs_seats.getInt(1) < 1) {
                                JOptionPane.showMessageDialog(this, "No seats Avaliable");
                            } else {
                                uni.updateSeats(course_id, university_id, rs_seats.getInt(1) - 1);
                                Student s_update = new Student();
                                String student_college_id = university_name.substring(0, 3).toUpperCase() + "-" + getRandomNumber();
                                s_update.updateStudentCollege(student_id, course_id, university_id, student_college_id, "Admitted", student_email, password);
                                 showTable();
                                showUniversityTable();
                                ComboBoxFOI.removeAllItems();
                                ComboBoxCourse.removeAllItems();
                                ComboBoxUniversity.removeAllItems();
                                System.out.println(student_email);
                                sentEmail(student_email, university_name, password);
                            }
                        }
                    }

                }

            } catch (SQLException ex) {
                ex.getMessage();
            }
        }
    }

    private void assignFreeLancer() {
        int selectedRowIndex = tblStudent.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblStudent.getModel();
        student_id = Integer.parseInt(model.getValueAt(selectedRowIndex, 0).toString());
        if (!(ComboBoxCourse.getSelectedItem() != null || ComboBoxUniversity.getSelectedItem() != null)) {
            JOptionPane.showMessageDialog(this, "Please select from dropdown");
        } else {
            String course_name = ComboBoxCourse.getSelectedItem().toString();
            String freelancer_name = ComboBoxUniversity.getSelectedItem().toString();
            try {
                Courses cs = new Courses();
                rs_course_id = cs.getCourseIdByName(course_name);
                while (rs_course_id.next()) {
                    int course_id, freelancer_id;
                    course_id = rs_course_id.getInt(1);
                    PersonalOrganization ps = new PersonalOrganization();
                    rs_freelancer_id = ps.getFreelancerIdByName(freelancer_name.split(" ")[0], freelancer_name.split(" ")[1]);
                    student_email = model.getValueAt(selectedRowIndex, 2).toString().toLowerCase() + "." + model.getValueAt(selectedRowIndex, 1).toString().toLowerCase() + "@gmail.com";
                    password = model.getValueAt(selectedRowIndex, 1).toString().toLowerCase() + "." + model.getValueAt(selectedRowIndex, 2).toString().toLowerCase();
                    while (rs_freelancer_id.next()) {
                        freelancer_id = rs_freelancer_id.getInt(1);
                        int seats = rs_freelancer_id.getInt(8);
                        if (seats < 1) {
                            JOptionPane.showMessageDialog(this, "No seats Avaliable");
                        } else {
                            ps.updateSeats(freelancer_id, seats - 1);
                            Student s_update = new Student();

                            s_update.updateStudentFreeLancer(student_id, course_id, freelancer_id, "Admitted", student_email, password);
                               showTable();
                                showFreeLancer();
                            String zoom_link = rs_freelancer_id.getString(7);
                            sentFreeLancerEmail(student_email, freelancer_name, course_name, zoom_link, password);
                            ComboBoxFOI.removeAllItems();
                            ComboBoxCourse.removeAllItems();
                            ComboBoxUniversity.removeAllItems();
                            System.out.println(student_email);

                        }
                    }
                }
            } catch (SQLException ex) {
                ex.getMessage();
            }
        }
    }

    private void sentFreeLancerEmail(String student_email, String freelancer_name, String course_name, String zoom_link, String password) {
        try {
            Properties properties = new Properties();
            properties.put("mail.smtp.auth", "true");
            properties.put("mail.smtp.starttls.enable", "true");
            properties.put("mail.smtp.ssl.host", "smtp.gmail.com");
            properties.put("mail.smtp.host", "smtp.gmail.com");
            properties.put("mail.smtp.port", 587);
            Session session = Session.getDefaultInstance(properties,
                    new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication("helpinghomeless.aed@gmail.com", "gygsgpsczxfzjvjj");

                }
            });
            String content = "Welcome to course " + course_name + " by " + freelancer_name + ".\r\n here the zoom link: " + zoom_link + "\r\n Your email: " + student_email + "\r\n password: " + password + "\r\n for the portal.";

            System.out.println(session);
            Message message = new MimeMessage(session);
            message.setSubject("Welcome to course " + course_name + "");
            message.setContent(content, "text/plain");
            message.setFrom(new InternetAddress("helpinghomeless.aed@gmail.com"));
            message.setRecipient(RecipientType.TO, new InternetAddress(student_email));
            message.setSentDate(new Date());

            Transport.send(message);
            JOptionPane.showMessageDialog(this, "Email Sent");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void showFreeLancer() {
         try {
            DefaultTableModel model = (DefaultTableModel) tblFreeLancer.getModel();
            model.setRowCount(0);
            PersonalOrganization ps  = new PersonalOrganization();
            rs_all_freelancer = ps.getAllFreeLancer();
            while (rs_all_freelancer.next()) {
                Object[] row = new Object[4];

                row[0] = rs_all_freelancer.getString(1);
                row[1] = rs_all_freelancer.getString(2);
                row[2] = rs_all_freelancer.getString(3);
                row[3] = rs_all_freelancer.getInt(4);

                model.addRow(row);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }
}